# 实现单纯型法的矩阵运算
import numpy as np


# 要求b都大于零！！！
A = [[0,-1,-14,-6,0,0,0,0],
     [4, 1,  1, 1,1,0,0,0],
     [2, 1,  0, 0,0,1,0,0],
     [3, 0,  0, 1,0,0,1,0],
     [6, 0,  3, 1,0,0,0,1]]
A = np.array(A,dtype = float)

print(A)

# 第二行 第一列
while 1:
    for i in range(1,A.shape[1]):
        if A[0,i] < 0:
            New_x_index = i;
            break;
        
    constrain = np.inf;operation_row = 1;
    for i in range(1,A.shape[0]):
        if A[i,New_x_index] > 0 and A[i,0]/A[i,New_x_index] < constrain:
            constrain = A[i,0]/A[i,New_x_index];
            operation_row = i;

    A[operation_row,:] /= A[operation_row,New_x_index];
    for i in range(5):
        if i != operation_row: 
            A[i,:] += -1 * A[i,New_x_index] * A[operation_row,:]
    #print(A)
    if (A[0,:] >= 0).all():
        break;

print('the min is:',-1 * A[0,0])
    
